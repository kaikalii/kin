WHITESPACE = _{ " " | "\t" | "\r" }
single_line_comment = @{ "#" ~ (!NEWLINE ~ ANY)* ~ &NEWLINE }
multi_line_comment = @{ "'''" ~ (!"'''" ~ ANY)* ~ "'''" }
COMMENT = _{ multi_line_comment | single_line_comment }
keyword = { "true" | "false" | "nil" | "is" | "isnt" | "and" | "or" | "not" | "end" }

// Numbers
nat = @{ ASCII_DIGIT+ }
int = @{ ("+" | "-") ~ nat }
real = @{ int ~ ("." ~ ASCII_DIGIT*)+ ~ (^"e" ~ int)? }

// String literals
string = { "\"" ~ (raw_string | "\\" ~ (predefined | byte | unicode))* ~ "\"" }
raw_string = { (!("\\" | "\"") ~ ANY)+ }
hex = _{ '0'..'9' | 'a'..'f' | 'A'..'F' }
unicode_hex = @{ hex{1, 6} }
predefined = { "n" | "r" | "t" | "\\" | "0" | "\"" | "'" }
byte = @{ "x" ~ hex{2} }
unicode = @{ "u" ~ "{" ~ unicode_hex ~ "}" }

// Idents
ident_inner = @{ (LETTER | OTHER_SYMBOL) ~ ("_"* ~ (LETTER | OTHER_SYMBOL | DECIMAL_NUMBER | OTHER_NUMBER)+)* }
ident = { !keyword ~ ident_inner | "_" }

// Operators
op_as = { "+" | "-" }
op_mdr = { "*" | "/" | "%" }
op_comp = { "isnt" | "is" | "<=" | ">=" | "<" | ">" }
op_and = { "and" }
op_or = { "or" }
op_un = { "not" }

// Expressions
paren_expr = { "(" ~ items ~ ")" }
bool_literal = { "true" | "false" }
nil = { "nil" }
bar = { "|" }
param = { ident }
closure = { param* ~ bar ~ items}
term = { real | int | nat | closure | ident | bool_literal | nil | string | paren_expr }
insertion = _{ ":" ~ ident ~ term }
expr_insert = { term ~ (insertion+ | NEWLINE ~ (insertion+ ~ NEWLINE)+ ~ "end" )? }
expr_call_single = { expr_insert+ }
chain_call = { "," ~ NEWLINE? }
expr_call = { expr_call_single ~ (chain_call ~ expr_call_single)* ~ chain_call? }
expr_un = { op_un? ~ expr_call }
expr_mdr = { expr_un ~ (op_mdr ~ expr_un)* }
expr_as = { expr_mdr ~ (op_as ~ expr_mdr)* }
expr_cmp = { expr_as ~ (op_comp ~ expr_as)* }
expr_and = { expr_cmp ~ (NEWLINE? ~ op_and ~ NEWLINE? ~ expr_cmp)* }
expr_or = { expr_and ~ (NEWLINE? ~ op_or ~ NEWLINE? ~ expr_and)* }
expr = { expr_or }

// Items
equals = { "=" }
def = { param+ ~ equals ~ (NEWLINE ~ items ~ "end" | expr) }
item = { def | expr }
items = { (item ~ NEWLINE*)+ }
file = { SOI ~ NEWLINE* ~ items? ~ EOI }
