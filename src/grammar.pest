horiz_ws = _{ " " | "\t" | "\r" }
WHITESPACE = _{ horiz_ws }
// single_line_comment = @{ "#" ~ (!"\n" ~ ANY)* ~ &"\n" }
// multi_line_comment = @{ "#/" ~ (!"/#" ~ ANY)* ~ "/#" }
COMMENT = _{ "#" ~ (!"\n" ~ ANY)* ~ &"\n" }

chain_call = { "," ~ horiz_ws* ~ "\n"? }
sep_expr = _{ ";" | "\n" }

keyword = { "true" | "false" | "is" | "isnt" | "and" | "or" }

// Numbers
nat = @{ ASCII_DIGIT+ }
int = @{ ("+" | "-")+ ~ nat }
real = @{ int ~ ("." ~ ASCII_DIGIT*)+ ~ (^"e" ~ int)? }

// String literals
string = { "\"" ~ (raw_string | escape)* ~ "\"" }
raw_string = { (!("\\" | "\"") ~ ANY)+ }
hex = _{ '0'..'9' | 'a'..'f' | 'A'..'F' }
unicode_hex = @{ hex{1, 6} }
predefined = { "n" | "r" | "t" | "\\" | "0" | "\"" | "'" }
byte       = @{ "x" ~ hex{2} }
unicode    = @{ "u" ~ "{" ~ unicode_hex ~ "}" }
escape     = @{ "\\" ~ (predefined | byte | unicode) }

// Idents
ident_start_char = { LETTER }
ident_inner_char = { ident_start_char | "_" }
ident_inner = @{ ident_start_char ~ ident_inner_char* }
ident = { !keyword ~ ident_inner }

// Operators
op_as = { "+" | "-" }
op_mdr = { "*" | "/" | "%" }
op_comp = { "is" | "isnt" | "<=" | ">=" | "<" | ">" }
op_and = { "and" }
op_or = { "or" }
op_not = { "not" }

// Expressions
paren_expr = { "(" ~ expr ~ ")" }
bool_literal = { "true" | "false" }
nil = { "nil" }
fat_arrow = { "=>" }
inline_function = { (ident+ | "()") ~ fat_arrow ~ expr}
term = { real | int | nat | bool_literal | nil | string | inline_function | ident | paren_expr }
expr_call_single = { term+ }
expr_call = { expr_call_single ~ (chain_call ~ expr_call_single)* ~ chain_call? }
expr_not = { op_not? ~ expr_call }
expr_mdr = { expr_not ~ (op_mdr ~ expr_not)* }
expr_as = { expr_mdr ~ (op_as ~ expr_mdr)* }
expr_cmp = { expr_as ~ (op_comp ~ expr_as)* }
expr_and = { expr_cmp ~ (op_and ~ expr_cmp)* }
expr_or = { expr_and ~ (op_or ~ expr_and)* }
expr = { expr_or }
expr_list = { (expr ~ sep_expr*)+ }

// Items
item = { expr_list }
items = { item* }
